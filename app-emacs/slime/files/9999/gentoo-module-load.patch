diff --git a/contrib/swank-arglists.lisp b/contrib/swank-arglists.lisp
index eb6d905..cacae50 100644
--- a/contrib/swank-arglists.lisp
+++ b/contrib/swank-arglists.lisp
@@ -9,8 +9,7 @@
 
 (in-package :swank)
 
-(eval-when (:compile-toplevel :load-toplevel :execute)
-  (swank-require :swank-c-p-c))
+(swank-require :swank-c-p-c)
 
 ;;;; Utilities
 
diff --git a/contrib/swank-fuzzy.lisp b/contrib/swank-fuzzy.lisp
index 736cf1a..9d47530 100644
--- a/contrib/swank-fuzzy.lisp
+++ b/contrib/swank-fuzzy.lisp
@@ -10,8 +10,7 @@
 
 (in-package :swank)
 
-(eval-when (:compile-toplevel :load-toplevel :execute)
-  (swank-require :swank-c-p-c))
+(swank-require :swank-c-p-c)
 
 ;;; For nomenclature of the fuzzy completion section, please read
 ;;; through the following docstring.
@@ -622,4 +621,4 @@ for interactive debugging purpose."
           (format t "~&~VA  score ~8,2F  ~A"
                   max-len (highlight-completion result sym) score result))))
 
-(provide :swank-fuzzy)
\ No newline at end of file
+(provide :swank-fuzzy)
diff --git a/contrib/swank-sbcl-exts.lisp b/contrib/swank-sbcl-exts.lisp
index 6db3457..1d86594 100644
--- a/contrib/swank-sbcl-exts.lisp
+++ b/contrib/swank-sbcl-exts.lisp
@@ -7,8 +7,7 @@
 
 (in-package :swank)
 
-(eval-when (:compile-toplevel :load-toplevel :execute)
-  (swank-require :swank-arglists))
+(swank-require :swank-arglists)
 
 ;; We need to do this so users can place `slime-sbcl-exts' into their
 ;; ~/.emacs, and still use any implementation they want.
diff --git a/swank.lisp b/swank.lisp
index 4ac26b6..99df013 100644
--- a/swank.lisp
+++ b/swank.lisp
@@ -2922,12 +2922,15 @@ Record compiler notes signalled as `compiler-condition's."
   "Load the module MODULE."
   (dolist (module (if (listp modules) modules (list modules)))
     (unless (member (string module) *modules* :test #'string=)
-      (require module (if filename
-                          (filename-to-pathname filename)
-                          (module-filename module)))))
+      (let ((*load-print* nil)
+            (*load-verbose* nil)
+            #+cmu (ext:*gc-verbose* nil))
+        (require module (if filename
+                            (filename-to-pathname filename)
+                            (module-filename module))))))
   *modules*)
 
-(defvar *find-module* 'find-module
+(defvar *find-module* 'find-module-gentoo
   "Pluggable function to locate modules.
 The function receives a module name as argument and should return
 the filename of the module (or nil if the file doesn't exist).")
@@ -2957,6 +2960,21 @@ the filename of the module (or nil if the file doesn't exist).")
     (some (lambda (dir) (some #'probe-file (module-canditates name dir)))
           *load-path*)))
 
+(defun swank-fasl-pathname ()
+  (make-pathname :name nil :type nil
+                 :defaults (car (asdf:output-files
+                                 (make-instance 'asdf:compile-op)
+                                 (car (asdf:module-components
+                                       (asdf:find-system :swank)))))))
+
+(defun append-dir (pathname dir)
+  (make-pathname :directory (append (pathname-directory pathname) dir)))
+
+(defun find-module-gentoo (module)
+  (or (let ((*load-path* (list (append-dir (swank-fasl-pathname) '("contrib"))
+                               (append-dir swank-loader:*source-directory* '("contrib")))))
+        (find-module module))
+      (find-module module)))
 
 ;;;; Macroexpansion
 
